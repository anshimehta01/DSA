class Solution {
public:
    double myPow(double x, int n) {
        long long N = n;          // use 64-bit to safely handle INT_MIN
        if (N < 0) {              // handle negative power
            x = 1.0 / x;
            N = -N;
        }

        double result = 1.0;      // identity for multiplication
        while (N > 0) {           // binary exponentiation (O(log n))
            if (N & 1) result *= x; // if current bit is 1, multiply once
            x *= x;               // square base each step
            N >>= 1;              // shift to next bit
        }
        return result;
    }
};
