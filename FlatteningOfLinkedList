// Function to merge two linked lists
Node* mergeTwoLists(Node* a, Node* b) {
    Node* temp = new Node(0);
    Node* res = temp;

    while (a != NULL && b != NULL) {
        if (a->data < b->data) {
            temp->bottom = a;
            temp = temp->bottom;
            a = a->bottom;
        } else {
            temp->bottom = b;
            temp = temp->bottom;
            b = b->bottom;
        }
    }

    if (a) temp->bottom = a;
    else temp->bottom = b;

    return res->bottom;
}

// Function to flatten the linked list
Node* flatten(Node* root) {
    if (root == NULL || root->next == NULL)
        return root;

    // Recur for list on right
    root->next = flatten(root->next);

    // Now merge
    root = mergeTwoLists(root, root->next);

    // Return the root
    // It will be in turn merged with its left
    return root;
}
