/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        ListNode* dummy = new ListNode(-1);  // CORRECTED: new ListNode, not newListNode
        ListNode* curr = dummy;              // CORRECTED: ListNode* curr, not ListNode curr*
        int carry = 0;

        // Loop until both lists end AND no carry is left
        while (l1 != nullptr || l2 != nullptr || carry != 0) {

            int sum = carry;  // Start with previous carry

            if (l1 != nullptr) {            // Add from l1 if exists
                sum += l1->val;
                l1 = l1->next;
            }

            if (l2 != nullptr) {            // Add from l2 if exists
                sum += l2->val;
                l2 = l2->next;
            }

            // Create a new node with the digit (sum % 10)
            curr->next = new ListNode(sum % 10);
            curr = curr->next;  // Move curr ahead

            carry = sum / 10;   // Update carry for next iteration
        }

        return dummy->next; // Skip dummy and return actual head
    }
};
