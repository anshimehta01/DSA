/**
 * Definition for singly-linked list.
 * struct ListNode {
 * int val;
 * ListNode *next;
 * ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // Base case: 0 or 1 node means no cycle
        if (head == NULL || head->next == NULL) {
            return false;
        }

        // Initialize two pointers: fast (the "hare") and slow (the "tortoise")
        ListNode *fast = head;
        ListNode *slow = head;

        // Loop until the fast pointer reaches the end (NULL) or the node before the end (fast->next == NULL)
        while (fast != NULL && fast->next != NULL) {
            // fast moves two steps
            fast = fast->next->next;
            // slow moves one step
            slow = slow->next;

            // If the pointers meet, a cycle is present
            if (fast == slow) {
                return true;
            }
        }

        // If the loop finishes without the pointers meeting, there is no cycle
        return false;
    }
};